/*------------------------------------------------------------------------------
| This file is distributed under the MIT License.
| See accompanying file /LICENSE for details.
| Author(s): Bruno Schmitt
*-----------------------------------------------------------------------------*/
#pragma once

#include "../networks/gates/gate_kinds.hpp"
#include "../views/depth_view.hpp"

#include <algorithm>
#include <cstdint>
#include <cstdio>
#include <iostream>
#include <vector>

namespace tweedledum {

template<typename Network>
inline void write_dot(Network const& dag, std::string filename = "test.dot")
{
	auto file = std::fopen(filename.c_str(), "w");

	std::cout << "Writing dot file...\n";
	std::cout << "  + Computing node levels\n";
	auto ntk_lvl = depth_view(dag);

	std::cout << "  + Write dot header\n";
	fprintf(file, "# Quantum DAG structure generated by tweedledum package\n");
	fprintf(file, "digraph QuantumNet {\n");
	fprintf(file, "\trankdir = \"RL\";\n");
	fprintf(file, "\tsize = \"7.5,10\";\n");
	fprintf(file, "\tcenter = true;\n");
	fprintf(file, "\tedge [dir = back];\n\n");

	std::cout << "  + Create invisible level label nodes\n";
	fprintf(file, "\t{\n");
	fprintf(file, "\t\tnode [shape = plaintext];\n");
	fprintf(file, "\t\tedge [style = invis];\n");
	for (auto l = ntk_lvl.depth() + 1; l --> 0;) {
		fprintf(file, "\t\tLevel%d [label = \"\"];\n", l);
	}
	fprintf(file, "\t\t");
	for (auto l = ntk_lvl.depth() + 1; l --> 0;) {
		fprintf(file, "Level%d%s", l, l != 0 ? " -> " : ";");
	}
	fprintf(file, "\n\t}\n");

	std::cout << "  + Create output nodes\n";
	fprintf(file, "\t{\n");
	fprintf(file, "\t\trank = same;\n");
	fprintf(file, "\t\tLevel%d;\n", ntk_lvl.depth());
	dag.foreach_output([&file] (auto const& node, auto index) {
		fprintf(file, "\t\tNode%d [label = \"%d\"", index, node.gate.target());
		fprintf(file, ", shape = cds");
		fprintf(file, ", color = coral, fillcolor = coral");
		fprintf(file, "];\n");
	});
	fprintf(file, "\t}\n");

	std::cout << "  + Create gate nodes\n";
	for (auto l = ntk_lvl.depth(); l --> 1;) {
		fprintf(file, "\t{\n");
		fprintf(file, "\t\trank = same;\n");
		fprintf(file, "\t\tLevel%d;\n", l);

		ntk_lvl.foreach_gate([&file, &ntk_lvl, l] (auto const& node, auto index) {
			if (ntk_lvl.level(node) != l) {
				return;
			}
			fprintf(file, "\t\tNode%d [label = \"%d\"", index, index);
			if (node.gate.is(gate_kinds_t::cx))
				fprintf(file, ", shape = doublecircle");
			else
				fprintf(file, ", shape = ellipse");
			fprintf(file, "];\n" );
		});
		fprintf(file, "\t}\n");
	}

	std::cout << "  + Create input nodes\n";
	fprintf(file, "\t{\n" );
	fprintf(file, "\t\trank = same;\n" );
	fprintf(file, "\t\tLevel0;\n");
	ntk_lvl.foreach_input([&file] (auto const& node, auto index) {
		fprintf(file, "\t\tNode%d [label = \"%d\"", index, node.gate.target());
		fprintf(file, ", shape = cds");
		fprintf(file, ", color = coral, fillcolor = coral");
		fprintf(file, "];\n");
	});
	fprintf(file, "\t}\n\n");

	std::cout << "  + Create edges\n";
	ntk_lvl.foreach_gate([&ntk_lvl, &file] (auto& node, auto index) {
		ntk_lvl.foreach_child(node, [&] (auto child, auto qubit_id) {
			fprintf(file, "\tNode%d -> Node%d [style = %s];\n", index,
			        child.index, node.gate.is_control(qubit_id) ? "dotted" : "solid");
		});
	});
	ntk_lvl.foreach_output([&ntk_lvl, &file] (auto& node, auto index) {
		ntk_lvl.foreach_child(node, [&] (auto child) {
			fprintf(file, "\tNode%d -> Node%d [style = solid];\n", index, child.index);
		});
	});

	fprintf(file, "}\n");
	std::cout << "[done]\n";
	std::fclose(file);
}

} // namespace tweedledum

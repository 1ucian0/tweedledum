/*-------------------------------------------------------------------------------------------------
| This file is distributed under the MIT License.
| See accompanying file /LICENSE for details.
*------------------------------------------------------------------------------------------------*/
#include "tweedledum/io/dotqc.hpp"

#include "tweedledum/gates/gate.hpp"
#include "tweedledum/networks/netlist.hpp"
#include "tweedledum/networks/op_dag.hpp"
#include "tweedledum/networks/wire.hpp"
#include "tweedledum/operations/w3_op.hpp"
#include "tweedledum/operations/wn32_op.hpp"

#include <catch.hpp>
#include <sstream>

using namespace tweedledum;

TEMPLATE_PRODUCT_TEST_CASE("DotQC reader", "[dotqc][template]",
                           (netlist, op_dag), (wn32_op, w3_op))
{
	using op_type = typename TestType::op_type;
	std::istringstream input;
	input.str(".v a b c\n"
	          ".i a b c\n"
	          "BEGIN\n"
	          "tof a b c\n"
	          "Y a b c\n"
	          "Z a b c\n"
	          "H a\n"
	          "X a\n"
	          "Y a\n"
	          "Z a\n"
	          "S a\n"
	          "T a\n"
	          "S* a\n"
	          "T* a\n"
	          "X a b\n"
	          "Y a b\n"
	          "Z a b\n"
	          "END\n");

	TestType network;
	dotqc_reader reader(network);
	dotqc_read(input, reader, identify_gate());

	CHECK(network.num_qubits() == 3u);
	CHECK(network.num_operations() == 14u);

	std::vector<gate> gs = {gate_lib::ncx, gate_lib::ncy, gate_lib::ncz, gate_lib::h,
	                        gate_lib::x,   gate_lib::y,   gate_lib::z,   gate_lib::s,
	                        gate_lib::t,   gate_lib::sdg, gate_lib::tdg, gate_lib::cx,
	                        gate_lib::cy,  gate_lib::cz};

	uint32_t i = 0u;
	network.foreach_op([&](op_type const& op) {
		CHECK(op.id() == gs.at(i++).id());
	});
}

TEMPLATE_PRODUCT_TEST_CASE("DotQC writer", "[dotqc][template]", (netlist, op_dag), (w3_op, wn32_op))
{
	std::vector<gate> one_qubit = {gate_lib::h, gate_lib::x, gate_lib::y,   gate_lib::z,
	                               gate_lib::s, gate_lib::t, gate_lib::sdg, gate_lib::tdg};
	std::vector<gate> two_qubit = {gate_lib::cx, gate_lib::cy, gate_lib::cz};
	std::vector<gate> three_qubit = {gate_lib::ncx, gate_lib::ncy, gate_lib::ncz};

	TestType network;
	wire::id q0 = network.create_qubit();
	wire::id q1 = network.create_qubit();
	wire::id q2 = network.create_qubit();

	for (auto const& gate : one_qubit) {
		network.create_op(gate, q0);
	}
	for (auto const& gate : two_qubit) {
		network.create_op(gate, q0, q1);
	}
	for (auto const& gate : three_qubit) {
		network.create_op(gate, q0, q1, q2);
	}
	std::ostringstream os;
	write_dotqc(network, os);

	std::string expected_dotqc = "# Generated by tweedledum\n"
	                             ".v __dum_q0 __dum_q1 __dum_q2\n"
	                             "BEGIN\n\n"
	                             "H __dum_q0\n"
	                             "X __dum_q0\n"
	                             "Y __dum_q0\n"
	                             "Z __dum_q0\n"
	                             "S __dum_q0\n"
	                             "T __dum_q0\n"
	                             "S* __dum_q0\n"
	                             "T* __dum_q0\n"
	                             "X __dum_q0 __dum_q1\n"
	                             "Y __dum_q0 __dum_q1\n"
	                             "Z __dum_q0 __dum_q1\n"
	                             "X __dum_q0 __dum_q1 __dum_q2\n"
	                             "Y __dum_q0 __dum_q1 __dum_q2\n"
	                             "Z __dum_q0 __dum_q1 __dum_q2\n"
	                             "\nEND\n";
	CHECK(os.str() == expected_dotqc);
}

TEMPLATE_PRODUCT_TEST_CASE("DotQC read/write", "[dotqc][template]", (netlist, op_dag),
                           (wn32_op, w3_op))
{
	std::istringstream input;
	input.str("# Generated by tweedledum\n"
	          ".v a b c\n"
	          "BEGIN\n\n"
	          "X a b c\n"
	          "Y a b c\n"
	          "Z a b c\n"
	          "H a\n"
	          "X a\n"
	          "Y a\n"
	          "Z a\n"
	          "S a\n"
	          "T a\n"
	          "S* a\n"
	          "T* a\n"
	          "X a b\n"
	          "Y a b\n"
	          "Z a b\n"
	          "\nEND\n");

	TestType network;
	dotqc_reader reader(network);
	dotqc_read(input, reader, identify_gate());

	std::ostringstream os;
	write_dotqc(network, os);

	CHECK(os.str() == input.str());
}
